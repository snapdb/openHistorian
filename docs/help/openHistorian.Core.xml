<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>openHistorian.Core</name>
  </assembly>
  <members>
    <member name="T:openHistorian.Core.OldHistorianReader">
      <summary>
            Version 1.0 openHistorian optimized file reader.
            </summary>
    </member>
    <member name="M:openHistorian.Core.OldHistorianReader.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>openHistorian.Core.OldHistorianReader</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:openHistorian.Core.OldHistorianReader.DataBlockCount">
      <summary>
            Gets data-block count as serialized in header data.
            </summary>
    </member>
    <member name="P:openHistorian.Core.OldHistorianReader.DataBlockSize">
      <summary>
            Gets data-block size as serialized in header data.
            </summary>
    </member>
    <member name="M:openHistorian.Core.OldHistorianReader.Dispose">
      <summary>
            Releases all the resources used by the <see cref="T:openHistorian.Core.OldHistorianReader" /> object.
            </summary>
    </member>
    <member name="M:openHistorian.Core.OldHistorianReader.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:openHistorian.Core.OldHistorianReader" /> object and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
    </member>
    <member name="M:openHistorian.Core.OldHistorianReader.Finalize">
      <summary>
            Releases the unmanaged resources before the <see cref="T:openHistorian.Core.OldHistorianReader" /> object is reclaimed by <see cref="T:System.GC" />.
            </summary>
    </member>
    <member name="M:openHistorian.Core.OldHistorianReader.Open(System.String)">
      <summary>
            Opens the historian archive file.
            </summary>
      <param name="fileName">File name of historian archive to open.</param>
    </member>
    <member name="P:openHistorian.Core.OldHistorianReader.PointsArchived">
      <summary>
            Gets points received by archive as serialized in header data.
            </summary>
    </member>
    <member name="P:openHistorian.Core.OldHistorianReader.PointsReceived">
      <summary>
            Gets points received by archive as serialized in header data.
            </summary>
    </member>
    <member name="M:openHistorian.Core.OldHistorianReader.Read">
      <summary>
            Reads points from openHistorian 1.0 archive file in native order.
            </summary>
      <returns>An IEnumerable of DataPoint representing the read data points.</returns>
    </member>
    <member name="T:openHistorian.Core.OldHistorianReader.DataPoint">
      <summary>
            openHistorian 1.0 Data Point.
            </summary>
    </member>
    <member name="F:openHistorian.Core.OldHistorianReader.DataPoint.Flags">
      <summary>
            Any flags associated with the data point.
            </summary>
    </member>
    <member name="F:openHistorian.Core.OldHistorianReader.DataPoint.PointID">
      <summary>
            The PointID for the data point.
            </summary>
    </member>
    <member name="F:openHistorian.Core.OldHistorianReader.DataPoint.Timestamp">
      <summary>
            The official timestamp of the data point.
            </summary>
    </member>
    <member name="F:openHistorian.Core.OldHistorianReader.DataPoint.Value">
      <summary>
            The enumerated value of the data point.
            </summary>
    </member>
    <member name="T:openHistorian.Core.Data.PeriodicScanner">
      <summary>
            Scanner class that parses for queries.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.PeriodicScanner.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the PeriodicScanner class with the specified number of samples per second.
            The default sampling period is the number of ticks per second, divided by the number of samples per second, divided by four.
            </summary>
      <param name="samplesPerSecond">The number of samples per second for the scanner.</param>
    </member>
    <member name="M:openHistorian.Core.Data.PeriodicScanner.#ctor(System.Int32,System.TimeSpan)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>openHistorian.Core.Data.PeriodicScanner</parameter>
          </include>
        </markup>
      </summary>
      <param name="samplesPerSecond">The number of samples per second for the scanner.</param>
      <param name="windowTolerance">The acceptable margin on either side of the specified window.</param>
    </member>
    <member name="M:openHistorian.Core.Data.PeriodicScanner.GetParser(System.DateTime,System.DateTime,System.UInt32)">
      <summary>
            Gets a seek filter parser based on the specified time range and sample count.
            </summary>
      <param name="startTime">The start time of the time range.</param>
      <param name="endTime">The end time of the time range.</param>
      <param name="sampleCount">The desired sample count.</param>
      <returns>A seek filter parser for the specified time range and sample count.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.PeriodicScanner.GetParser(System.DateTime,System.DateTime,System.UInt64)">
      <summary>
            Gets a seek filter parser based on the specified time range and samples per day.
            </summary>
      <param name="startTime">The start time of the time range.</param>
      <param name="endTime">The end time of the time range.</param>
      <param name="samplesPerDay">The number of samples per day.</param>
      <returns>A seek filter parser for the specified time range and samples per day.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.PeriodicScanner.SuggestSamplesPerDay(System.DateTime,System.DateTime,System.UInt32)">
      <summary>
            Suggests the number of samples per day based on the specified time range and sample count.
            </summary>
      <param name="startTime">The start time of the time range.</param>
      <param name="endTime">The end time of the time range.</param>
      <param name="sampleCount">The desired sample count.</param>
      <returns>The suggested number of samples per day.</returns>
    </member>
    <member name="T:openHistorian.Core.Data.SignalData">
      <summary>
            Contains a series of Times and Values for an individual signal.
            If using this class, you must specify a <see cref="T:openHistorian.Core.Data.Types.TypeBase" />.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.SignalData.#ctor(openHistorian.Core.Data.Types.TypeBase)">
      <summary>
            Declares a <see cref="T:openHistorian.Core.Data.SignalData" /> with an unspecified <see cref="T:openHistorian.Core.Data.Types.TypeBase" /> type.
            </summary>
      <param name="type">The type of the <see cref="T:openHistorian.Core.Data.Types.TypeBase" />, stored as m_type.</param>
    </member>
    <member name="M:openHistorian.Core.Data.SignalData.AddDataRaw(System.UInt64,System.UInt64)">
      <summary>
            Adds a value to the signal in its raw 64-bit format.
            </summary>
      <param name="time">The time value to consider.</param>
      <param name="value">The 64-bit value.</param>
    </member>
    <member name="P:openHistorian.Core.Data.SignalData.Count">
      <summary>
            Gets the number of values that are in the signal
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.SignalData.GetDataRaw(System.Int32,System.UInt64@,System.UInt64@)">
      <summary>
            Gets a value from the signal with the provided index in its
            raw 64-bit format.
            </summary>
      <param name="index">The zero based index of the position.</param>
      <param name="time">An output field for the time.</param>
      <param name="value">An output field for the raw 64-bit value.</param>
    </member>
    <member name="M:openHistorian.Core.Data.SignalData.GetDate(System.Int32)">
      <summary>
            Retrieves a ulong value representing a date at the specified index.
            </summary>
      <param name="index">The index at which to retrieve the date.</param>
      <returns>The ulong value representing the date at the specified index.</returns>
    </member>
    <member name="P:openHistorian.Core.Data.SignalData.Method">
      <summary>
            Provides the type conversion method for the base class to use
            </summary>
    </member>
    <member name="T:openHistorian.Core.Data.SignalDataBase">
      <summary>
            Contains a series of Times and Values for an individual signal.
            Abstract versions of this class should attempt to store the value
            in its most appropriate format to reduce the amount of conversion
            that must occur.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.SignalDataBase.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>openHistorian.Core.Data.SignalDataBase</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:openHistorian.Core.Data.SignalDataBase.AddData(System.UInt64,System.Double)">
      <summary>
            Adds a value to the signal and converts it from a <see cref="T:System.Double" />
            into its native format.
            </summary>
      <param name="time">the time value to consider</param>
      <param name="value">the value to convert</param>
    </member>
    <member name="M:openHistorian.Core.Data.SignalDataBase.AddData(System.UInt64,System.Int64)">
      <summary>
            Adds a value to the signal and converts it from a <see cref="T:System.Int64" />
            into its native format.
            </summary>
      <param name="time">the time value to consider</param>
      <param name="value">the value to convert</param>
    </member>
    <member name="M:openHistorian.Core.Data.SignalDataBase.AddData(System.UInt64,System.Single)">
      <summary>
            Adds a value to the signal and converts it from a <see cref="T:System.Single" />
            into its native format.
            </summary>
      <param name="time">the time value to consider</param>
      <param name="value">the value to convert</param>
    </member>
    <member name="M:openHistorian.Core.Data.SignalDataBase.AddData(System.UInt64,System.UInt64)">
      <summary>
            Adds a value to the signal and converts it from a <see cref="T:System.UInt64" />
            into its native format.
            </summary>
      <param name="time">the time value to consider</param>
      <param name="value">the value to convert</param>
    </member>
    <member name="M:openHistorian.Core.Data.SignalDataBase.AddDataRaw(System.UInt64,System.UInt64)">
      <summary>
            Adds a value to the signal in its raw 64-bit format.
            </summary>
      <param name="time">the time value to consider</param>
      <param name="value">the 64-bit value</param>
    </member>
    <member name="M:openHistorian.Core.Data.SignalDataBase.Completed">
      <summary>
            Flags this signal as complete which locks down the ability to add
            additional points to it.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Data.SignalDataBase.Count">
      <summary>
            Gets the number of values that are in the signal
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.SignalDataBase.GetData(System.Int32,System.UInt64@,System.Double@)">
      <summary>
            Gets a value from the signal with the provided index and automatically
            converts it to a <see cref="T:System.Double" />.
            </summary>
      <param name="index">The zero based index of the position</param>
      <param name="time">an output field for the time</param>
      <param name="value">an output field for the converted value</param>
    </member>
    <member name="M:openHistorian.Core.Data.SignalDataBase.GetData(System.Int32,System.UInt64@,System.Int64@)">
      <summary>
            Gets a value from the signal with the provided index and automatically
            converts it to a <see cref="T:System.Int64" />.
            </summary>
      <param name="index">The zero based index of the position</param>
      <param name="time">an output field for the time</param>
      <param name="value">an output field for the converted value</param>
    </member>
    <member name="M:openHistorian.Core.Data.SignalDataBase.GetData(System.Int32,System.UInt64@,System.Single@)">
      <summary>
            Gets a value from the signal with the provided index and automatically
            converts it to a <see cref="T:System.Single" />.
            </summary>
      <param name="index">The zero based index of the position</param>
      <param name="time">an output field for the time</param>
      <param name="value">an output field for the converted value</param>
    </member>
    <member name="M:openHistorian.Core.Data.SignalDataBase.GetData(System.Int32,System.UInt64@,System.UInt64@)">
      <summary>
            Gets a value from the signal with the provided index and automatically
            converts it to a <see cref="T:System.UInt64" />.
            </summary>
      <param name="index">The zero based index of the position</param>
      <param name="time">an output field for the time</param>
      <param name="value">an output field for the converted value</param>
    </member>
    <member name="M:openHistorian.Core.Data.SignalDataBase.GetDataRaw(System.Int32,System.UInt64@,System.UInt64@)">
      <summary>
            Gets a value from the signal with the provided index in its
            raw 64-bit format.
            </summary>
      <param name="index">The zero based index of the position</param>
      <param name="time">an output field for the time</param>
      <param name="value">an output field for the raw 64-bit value</param>
    </member>
    <member name="M:openHistorian.Core.Data.SignalDataBase.GetDate(System.Int32)">
      <summary>
            Gets the date from the signal with the provided index.
            </summary>
      <param name="index">The zero based index of the position.</param>
      <returns>The date from the specified signal with the provided index.</returns>
    </member>
    <member name="P:openHistorian.Core.Data.SignalDataBase.IsComplete">
      <summary>
            Gets if this signal has been processed and can no longer be added to.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Data.SignalDataBase.Method">
      <summary>
            Provides the type conversion method for the base class to use
            </summary>
    </member>
    <member name="T:openHistorian.Core.Data.Query.DataFillAdapter">
      <summary>
            Retrieves data.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.DataFillAdapter.#ctor(openHistorian.Core.Data.Query.PointStream)">
      <summary>
            Initializes a new instance of the DataFillAdapter class with the specified point stream.
            </summary>
      <param name="stream">The point stream used for data retrieval.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Query.DataFillAdapter.Dispose">
      <summary>
            Once completed, disposes of the <see cref="T:openHistorian.Core.Data.Query.DataFillAdapter" /> and releases the associated resources.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.DataFillAdapter.Fill(System.Action{System.UInt64,openHistorian.Core.Snap.HistorianValue})">
      <summary>
            Fills data frames using the specified callback.
            </summary>
      <param name="callback">The callback function needed to process the data frames.</param>
      <returns>
        <c>true</c> if data filling is successful; otherwise, <c>false</c> indicates the stream is invalid.
            </returns>
    </member>
    <member name="F:openHistorian.Core.Data.Query.DataFillAdapter.FrameTime">
      <summary>
            Gets or sets the frame time of the <see cref="T:openHistorian.Core.Data.Query.DataFillAdapter" />.
            </summary>
    </member>
    <member name="T:openHistorian.Core.Data.Query.FrameData">
      <summary>
            Represents a container for frame data, including sorted points and values.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.FrameData.#ctor">
      <summary>
            Initializes a new instance of the FrameData class with an empty sorted list for points and values.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.FrameData.#ctor(System.Collections.Generic.List{System.UInt64},System.Collections.Generic.List{openHistorian.Core.Snap.HistorianValueStruct})">
      <summary>
            Initializes a new instance of the FrameData class with a sorted list of points and their associated values.
            </summary>
      <param name="pointId">A list of point IDs to be included in the frame.</param>
      <param name="values">A list of historian values associated with the points.</param>
    </member>
    <member name="F:openHistorian.Core.Data.Query.FrameData.Points">
      <summary>
            Points within the <see cref="T:openHistorian.Core.Data.Query.FrameData" />.
            </summary>
    </member>
    <member name="T:openHistorian.Core.Data.Query.FrameReader">
      <summary>
            Represents a frame reader for querying historian data.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.FrameReader.#ctor(openHistorian.Core.Data.Query.PointStream)">
      <summary>
            Initializes a new instance of the FrameReader class.
            </summary>
      <param name="stream">The point stream for querying historian data.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Query.FrameReader.Dispose">
      <summary>
            Disposes of the stream.
            </summary>
    </member>
    <member name="F:openHistorian.Core.Data.Query.FrameReader.Frame">
      <summary>
            Frame data containing point IDs and historian values.
            </summary>
    </member>
    <member name="F:openHistorian.Core.Data.Query.FrameReader.FrameTime">
      <summary>
            The timestamp associated with the current  frame.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.FrameReader.Read">
      <summary>
            Reads the next frame from the historian data stream.
            </summary>
      <returns>True if there is another frame, false if the end of the stream is reached.</returns>
    </member>
    <member name="T:openHistorian.Core.Data.Query.GetDataFillAdapterMethods">
      <summary>
            Queries a historian database for a set of signals.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetDataFillAdapterMethods.GetFillAdapter(openHistorian.Core.Data.Query.PointStream)">
      <summary>
            Gets concentrated frames from the provided stream
            </summary>
      <param name="stream">The database to use.</param>
      <returns>
            A <see cref="T:openHistorian.Core.Data.Query.DataFillAdapter" /> for the provided point stream.
            </returns>
    </member>
    <member name="T:openHistorian.Core.Data.Query.GetDataReaderMethods">
      <summary>
            Provides extension methods for obtaining data readers and tables from a historian database.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetDataReaderMethods.GetDataReaderTable(SnapDB.Snap.Services.ClientDatabaseBase{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},System.UInt64,System.UInt64,System.Collections.Generic.IList{openHistorian.Core.Data.Query.ISignalWithName})">
      <summary>
            Gets a data table from the historian database for the specified time range and columns.
            </summary>
      <param name="database">The historian database to query.</param>
      <param name="start">The start timestamp for the query.</param>
      <param name="stop">The stop timestamp for the query.</param>
      <param name="columns">A list of columns to retrieve from the historian database.</param>
      <returns>A data table containing the retrieved data from the historian database.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetDataReaderMethods.GetTable(SnapDB.Snap.Services.ClientDatabaseBase{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},System.DateTime,System.DateTime,openHistorian.Core.Data.Query.TableDefinition)">
      <summary>
            Gets a data reader from the historian database for the specified time range and table definition.
            </summary>
      <param name="database">The historian database to query.</param>
      <param name="start">The start date of the query.</param>
      <param name="stop">The stop date of the query.</param>
      <param name="tableDefinition">The table definition for organizing and defining data tables.</param>
      <returns>An instance of the data reader for the specified query.</returns>
    </member>
    <member name="T:openHistorian.Core.Data.Query.GetFrameMethods">
      <summary>
            Queries a historian database for a set of signals.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetFrameMethods.GetFrames(SnapDB.Snap.IDatabaseReader{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},SnapDB.Snap.Filters.SeekFilterBase{openHistorian.Core.Snap.HistorianKey},SnapDB.Snap.Filters.MatchFilterBase{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue})">
      <summary>
            Gets frames from the historian as individual frames.
            </summary>
      <param name="database">The database to use.</param>
      <param name="timestamps">The timestamps to query for.</param>
      <param name="points">The points to query.</param>
      <returns>The frames from the historian.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetFrameMethods.GetFrames(SnapDB.Snap.IDatabaseReader{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},SnapDB.Snap.Filters.SeekFilterBase{openHistorian.Core.Snap.HistorianKey},System.UInt64[])">
      <summary>
            Gets frames from the historian as individual frames.
            </summary>
      <param name="database">The database to use.</param>
      <param name="timestamps">The timestamp associated with each frame.</param>
      <param name="points">An array of point IDs for which frames are requested.</param>
      <returns>The frames from the historian.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetFrameMethods.GetFrames(SnapDB.Snap.IDatabaseReader{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},SnapDB.Snap.Services.Reader.SortedTreeEngineReaderOptions,SnapDB.Snap.Filters.SeekFilterBase{openHistorian.Core.Snap.HistorianKey},SnapDB.Snap.Filters.MatchFilterBase{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue})">
      <summary>
            Gets frames from the historian as individual frames.
            </summary>
      <param name="database">the database to use</param>
      <param name="timestamps">the timestamps to query for</param>
      <param name="points">the points to query</param>
      <param name="options">A list of query options</param>
      <returns>The frames from the historian.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetFrameMethods.GetFrames(SnapDB.Snap.IDatabaseReader{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},System.DateTime,System.DateTime)">
      <summary>
            Gets frames from the historian as individual frames.
            </summary>
      <param name="database">The database to use.</param>
      <param name="startTime">The starting time to be included in the request.</param>
      <param name="stopTime">The ending time to be included in the request.</param>
      <returns>The frames from the historian.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetFrameMethods.GetFrames(SnapDB.Snap.IDatabaseReader{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},System.DateTime,System.DateTime,System.UInt64[])">
      <summary>
            Gets frames from the historian as individual frames.
            </summary>
      <param name="database">The database to use.</param>
      <param name="startTime">The starting time to be included in the request.</param>
      <param name="stopTime">The ending time to be included in the request.</param>
      <param name="points">An array of point IDs for which frames are requested.</param>
      <returns>The frames from the historian.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetFrameMethods.GetFrames(SnapDB.Snap.TreeStream{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue})">
      <summary>
            Retrieves concentrated frames from the provided stream and organizes them by timestamp.
            </summary>
      <param name="stream">The database stream to use for data retrieval.</param>
      <returns>A sorted list of frame data organized by timestamps.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetFrameMethods.RoundToTolerance(System.Collections.Generic.SortedList{System.DateTime,openHistorian.Core.Data.Query.FrameData},System.Int32)">
      <summary>
            Rounds the frame to the nearest level of specified tolerance.
            </summary>
      <param name="original">the frame to round</param>
      <param name="toleranceMilliseconds">the timespan in milliseconds.</param>
      <returns>A new frame that is rounded.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetFrameMethods.RoundToTolerance(System.Collections.Generic.SortedList{System.DateTime,openHistorian.Core.Data.Query.FrameData},System.TimeSpan)">
      <summary>
            Rounds the frame to the nearest level of specified tolerance.
            </summary>
      <param name="original">The frame to round.</param>
      <param name="tolerance">The timespan to round on.</param>
      <returns>A new frame that is rounded.</returns>
    </member>
    <member name="T:openHistorian.Core.Data.Query.GetFrameMethods.FrameDataConstructor">
      <summary>
            Helper class for constructing FrameData instances by accumulating point IDs and values.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetFrameMethods.FrameDataConstructor.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>openHistorian.Core.Data.Query.GetFrameMethods.FrameDataConstructor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:openHistorian.Core.Data.Query.GetFrameMethods.FrameDataConstructor.PointID">
      <summary>
            Gets a list of point IDs to be included in the frame.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetFrameMethods.FrameDataConstructor.ToFrameData">
      <summary>
            Creates a new FrameData instance from the accumulated point IDs and values.
            </summary>
      <returns>A FrameData instance based on the accumulated data.</returns>
    </member>
    <member name="F:openHistorian.Core.Data.Query.GetFrameMethods.FrameDataConstructor.Values">
      <summary>
            Gets a list of historian values associated with the points.
            </summary>
    </member>
    <member name="T:openHistorian.Core.Data.Query.GetFrameReaderMethods">
      <summary>
            Queries a historian database for a set of signals.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetFrameReaderMethods.GetFrameReader(openHistorian.Core.Data.Query.PointStream)">
      <summary>
            Gets concentrated frames from the provided stream.
            </summary>
      <param name="stream">The database to use.</param>
      <returns>The concentrated frames.</returns>
    </member>
    <member name="T:openHistorian.Core.Data.Query.GetPointStreamExtensionMethods">
      <summary>
            Queries a historian database for a set of signals. 
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetPointStreamExtensionMethods.GetPointStream(SnapDB.Snap.IDatabaseReader{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},SnapDB.Snap.Filters.SeekFilterBase{openHistorian.Core.Snap.HistorianKey},SnapDB.Snap.Filters.MatchFilterBase{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue})">
      <summary>
            Gets frames from the historian as individual frames.
            </summary>
      <param name="database">the database to use</param>
      <param name="timestamps">the timestamps to query for</param>
      <param name="points">the points to query</param>
      <returns>The frames from the historian.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetPointStreamExtensionMethods.GetPointStream(SnapDB.Snap.IDatabaseReader{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},SnapDB.Snap.Filters.SeekFilterBase{openHistorian.Core.Snap.HistorianKey},System.UInt64[])">
      <summary>
            Gets frames from the historian as individual frames.
            </summary>
      <param name="database">the database to use</param>
      <param name="timestamps">The timestamps to query for.</param>
      <param name="points">The points to query for.</param>
      <returns>The frames from the historian.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetPointStreamExtensionMethods.GetPointStream(SnapDB.Snap.IDatabaseReader{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},SnapDB.Snap.Services.Reader.SortedTreeEngineReaderOptions,SnapDB.Snap.Filters.SeekFilterBase{openHistorian.Core.Snap.HistorianKey},SnapDB.Snap.Filters.MatchFilterBase{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue})">
      <summary>
            Gets frames from the historian as individual frames.
            </summary>
      <param name="database">the database to use</param>
      <param name="timestamps">the timestamps to query for</param>
      <param name="points">the points to query</param>
      <param name="options">A list of query options</param>
      <returns>The frames from the historian.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetPointStreamExtensionMethods.GetPointStream(SnapDB.Snap.IDatabaseReader{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},System.DateTime,System.DateTime)">
      <summary>
            Gets frames from the historian as individual frames.
            </summary>
      <param name="database">The database to use.</param>
      <param name="startTime">The starting time to be included in the query.</param>
      <param name="stopTime">The ending time to be included in the query.</param>
      <returns>The frames from the historian.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetPointStreamExtensionMethods.GetPointStream(SnapDB.Snap.IDatabaseReader{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},System.DateTime,System.DateTime,System.UInt64[])">
      <summary>
            Gets frames from the historian as individual frames.
            </summary>
      <param name="database">The database to use.</param>
      <param name="startTime">The starting time to be included in the queries.</param>
      <param name="stopTime">The ending time to be included in the queries.</param>
      <param name="points">The points to query for.</param>
      <returns>The frames from the historian.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetPointStreamExtensionMethods.GetPointStream(SnapDB.Snap.TreeStream{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue})">
      <summary>
            Gets concentrated frames from the provided stream.
            </summary>
      <param name="stream">The database to use.</param>
      <returns>The frames from the historian.</returns>
    </member>
    <member name="T:openHistorian.Core.Data.Query.GetSignalMethods">
      <summary>
            Queries a historian database for a set of signals.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetSignalMethods.GetSignals(SnapDB.Snap.IDatabaseReader{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},SnapDB.Snap.Filters.SeekFilterBase{openHistorian.Core.Snap.HistorianKey},System.Collections.Generic.IEnumerable{openHistorian.Core.Data.Query.ISignalWithType},SnapDB.Snap.Services.Reader.SortedTreeEngineReaderOptions)">
      <summary>
            Retrieves historian signals and their data from the database using specified timestamps, signals, and reader options.
            </summary>
      <param name="database">The database reader instance used for signal retrieval.</param>
      <param name="timestamps">The seek filter for specifying the timestamp range.</param>
      <param name="signals">An enumerable collection of signals with type information.</param>
      <param name="readerOptions">The reader options for accessing the database.</param>
      <returns>A dictionary containing signals (identified by their historian IDs) and corresponding signal data.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetSignalMethods.GetSignals(SnapDB.Snap.IDatabaseReader{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},System.UInt64)">
      <summary>
            Queries all of the signals at the given time.
            </summary>
      <param name="database">The database to use.</param>
      <param name="time">The time to query.</param>
      <returns>The signals in the database that correspond to the specified time.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetSignalMethods.GetSignals(SnapDB.Snap.IDatabaseReader{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},System.UInt64,System.UInt64)">
      <summary>
            Queries all of the signals within a the provided time window [Inclusive]
            </summary>
      <param name="database">The database to use.</param>
      <param name="startTime">the lower bound of the time</param>
      <param name="endTime">the upper bound of the time. [Inclusive]</param>
      <returns>The results of the query within the specified time frame and database.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetSignalMethods.GetSignals(SnapDB.Snap.IDatabaseReader{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{openHistorian.Core.Data.Query.ISignalWithType})">
      <summary>
            Queries the provided signals within a the provided time window [Inclusive].
            With this method, the signals will be strong typed and therefore can be converted.
            </summary>
      <param name="database">The database to query.</param>
      <param name="startTime">The lower bound of the time.</param>
      <param name="endTime">The upper bound of the time [Inclusive].</param>
      <param name="signals">An IEnumerable of all of the signals to query as part of the results set.</param>
      <returns>The results of the query.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetSignalMethods.GetSignals(SnapDB.Snap.IDatabaseReader{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{System.UInt64})">
      <summary>
            Queries the provided signals within a the provided time window [Inclusive]
            </summary>
      <param name="database">The database to use.</param>
      <param name="startTime">the lower bound of the time</param>
      <param name="endTime">the upper bound of the time. [Inclusive]</param>
      <param name="signals">an IEnumerable of all of the signals to query as part of the results set.</param>
      <returns>The results of the query within the specified time and database.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetSignalMethods.GetSignals(SnapDB.Snap.IDatabaseReader{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{System.UInt64},openHistorian.Core.Data.Types.TypeBase)">
      <summary>
            Queries the provided signals within a the provided time window [Inclusive]
            This method will strong type the signals, but all signals must be of the same type for this to work.
            </summary>
      <param name="database">The database to use.</param>
      <param name="startTime">The lower bound of the time</param>
      <param name="endTime">The upper bound of the time. [Inclusive]</param>
      <param name="signals">An IEnumerable of all of the signals to query as part of the results set.</param>
      <param name="conversion">A single conversion method to use for all signals</param>
      <returns>The results from the query.</returns>
    </member>
    <member name="T:openHistorian.Core.Data.Query.GetSignalsWithCalculationsMethods">
      <summary>
            Provides extension methods for querying historian signals with calculations.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetSignalsWithCalculationsMethods.GetSignalsWithCalculations(SnapDB.Snap.Services.ClientDatabaseBase{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},SnapDB.Snap.Filters.SeekFilterBase{openHistorian.Core.Snap.HistorianKey},System.Collections.Generic.IEnumerable{openHistorian.Core.Data.Query.ISignalCalculation},SnapDB.Snap.Services.Reader.SortedTreeEngineReaderOptions)">
      <summary>
            Gets historian signals with calculations using specified timestamps, signals, and reader options.
            </summary>
      <param name="database">The database reader instance used for signal retrieval.</param>
      <param name="timestamps">The seek filter for specifying the timestamp range.</param>
      <param name="signals">An enumerable collection of signal calculations to apply to the query.</param>
      <param name="readerOptions">The reader options for accessing the database.</param>
      <returns>A dictionary of signals and their corresponding signal data after applying calculations.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetSignalsWithCalculationsMethods.GetSignalsWithCalculations(SnapDB.Snap.Services.ClientDatabaseBase{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{openHistorian.Core.Data.Query.ISignalCalculation})">
      <summary>
            Gets historian signals with calculations within a specified time range.
            </summary>
      <param name="database">The database reader instance used for signal retrieval.</param>
      <param name="startTime">The start time of the query range.</param>
      <param name="endTime">The end time of the query range.</param>
      <param name="signals">An enumerable collection of signal calculations to apply to the query.</param>
      <returns>A dictionary of signals and their corresponding signal data.</returns>
    </member>
    <member name="T:openHistorian.Core.Data.Query.GetTableMethods">
      <summary>
            Provides extension methods for retrieving historian data as a DataTable.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetTableMethods.GetTable(SnapDB.Snap.Services.ClientDatabaseBase{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},System.UInt64,System.UInt64,openHistorian.Core.Data.Query.IDelinearizedSignals)">
      <summary>
            Gets the DataTable from the historian database using delinearized signals
            </summary>
      <param name="database">The database reader instance used for data retrieval.</param>
      <param name="start">The starting timestamp of the data range.</param>
      <param name="stop">The ending timestamp of the data range.</param>
      <param name="signals">The delinearized signals to retrieve the data for.</param>
      <returns>A DataTable containing historian data based on the provided delinearized signals.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.GetTableMethods.GetTable(SnapDB.Snap.Services.ClientDatabaseBase{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},System.UInt64,System.UInt64,System.Collections.Generic.IList{openHistorian.Core.Data.Query.ISignalWithName})">
      <summary>
            Gets a DataTable from the historian database using a list of signals with names.
            </summary>
      <param name="database">The database reader instance used for data retrieval.</param>
      <param name="start">The start timestamp for the data range.</param>
      <param name="stop">The stop timestamp for the data range.</param>
      <param name="columns">A list of signals with names to retrieve data for.</param>
      <returns>A DataTable containing historian data based on the provided signals with names.</returns>
      <exception cref="T:System.Exception">Thrown if columns do not exist in the historian, thus causing the function not to work.</exception>
    </member>
    <member name="T:openHistorian.Core.Data.Query.HistorianDataPointReader">
      <summary>
            Represents a data point reader for querying historian data.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.#ctor(SnapDB.Snap.Services.ClientDatabaseBase{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},System.DateTime,System.DateTime,openHistorian.Core.Data.Query.TableDefinition)">
      <summary>
            Initializes a new instance of the HistorianDataPointReader class.
            </summary>
      <param name="database">The database for querying historian data.</param>
      <param name="start">The start date for the query.</param>
      <param name="stop">The stop date for the query.</param>
      <param name="tableDefinition">The table definition for organizing and defining data tables.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.Close">
      <summary>
            Closes the data point reader.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Data.Query.HistorianDataPointReader.Depth">
      <summary>
            Gets the depth of the data point reader.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Data.Query.HistorianDataPointReader.FieldCount">
      <summary>
            The number of fields included in the query.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetBoolean(System.Int32)">
      <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
      <param name="i">The zero-based column ordinal.</param>
      <returns>
            The value of the column.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetByte(System.Int32)">
      <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
      <param name="i">The zero-based column ordinal.</param>
      <returns>
            The 8-bit unsigned integer value of the specified column.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
      <param name="i">The zero-based column ordinal.</param>
      <param name="fieldOffset">The index within the field from which to start the read operation.</param>
      <param name="buffer">The buffer into which to read the stream of bytes.</param>
      <param name="bufferoffset">The index for <paramref name="buffer" /> to start the read operation.</param>
      <param name="length">The number of bytes to read.</param>
      <returns>
            The actual number of bytes read.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetChar(System.Int32)">
      <summary>
            Gets the character value of the specified column.
            </summary>
      <param name="i">The zero-based column ordinal.</param>
      <returns>
            The character value of the specified column.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>
            Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
      <param name="i">The zero-based column ordinal.</param>
      <param name="fieldoffset">The index within the row from which to start the read operation.</param>
      <param name="buffer">The buffer into which to read the stream of bytes.</param>
      <param name="bufferoffset">The index for <paramref name="buffer" /> to start the read operation.</param>
      <param name="length">The number of bytes to read.</param>
      <returns>
            The actual number of characters read.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetData(System.Int32)">
      <summary>
            Returns an <see cref="T:System.Data.IDataReader" /> for the specified column ordinal.
            </summary>
      <param name="i">The index of the field to find.</param>
      <returns>
            The <see cref="T:System.Data.IDataReader" /> for the specified column ordinal.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetDataTypeName(System.Int32)">
      <summary>
            Gets the data type information for the specified field.
            </summary>
      <param name="i">The index of the field to find.</param>
      <returns>
            The data type information for the specified field.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetDateTime(System.Int32)">
      <summary>
            Gets the date and time data value of the specified field.
            </summary>
      <param name="i">The index of the field to find.</param>
      <returns>
            The date and time data value of the specified field.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetDecimal(System.Int32)">
      <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
      <param name="i">The index of the field to find.</param>
      <returns>
            The fixed-position numeric value of the specified field.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetDouble(System.Int32)">
      <summary>
            Gets the double-precision floating point number of the specified field.
            </summary>
      <param name="i">The index of the field to find.</param>
      <returns>
            The double-precision floating point number of the specified field.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetFieldType(System.Int32)">
      <summary>
            Gets the <see cref="T:System.Type" /> information corresponding to the type of <see cref="T:System.Object" /> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />.
            </summary>
      <param name="i">The index of the field to find.</param>
      <returns>
            The <see cref="T:System.Type" /> information corresponding to the type of <see cref="T:System.Object" /> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetFloat(System.Int32)">
      <summary>
            Gets the single-precision floating point number of the specified field.
            </summary>
      <param name="i">The index of the field to find.</param>
      <returns>
            The single-precision floating point number of the specified field.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.
            </exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetGuid(System.Int32)">
      <summary>
            Returns the GUID value of the specified field.
            </summary>
      <param name="i">The index of the field to find.</param>
      <returns>
            The GUID value of the specified field.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetInt16(System.Int32)">
      <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
      <param name="i">The index of the field to find.</param>
      <returns>
            The 16-bit signed integer value of the specified field.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetInt32(System.Int32)">
      <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
      <param name="i">The index of the field to find.</param>
      <returns>
            The 32-bit signed integer value of the specified field.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetInt64(System.Int32)">
      <summary>
            Gets the 64-bit signed integer value of the specified field.
            </summary>
      <param name="i">The index of the field to find.</param>
      <returns>
            The 64-bit signed integer value of the specified field.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetName(System.Int32)">
      <summary>
            Gets the name for the field to find.
            </summary>
      <param name="i">The index of the field to find.</param>
      <returns>
            The name of the field or the empty string (""), if there is no value to return.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetOrdinal(System.String)">
      <summary>
            Return the index of the named field.
            </summary>
      <param name="name">The name of the field to find.</param>
      <returns>
            The index of the named field.
            </returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetSchemaTable">
      <summary>
            Gets a schema table for the data point reader.
            </summary>
      <returns>The schema table for the data point reader.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetString(System.Int32)">
      <summary>
            Gets the string value of the specified field.
            </summary>
      <param name="i">The index of the field to find.</param>
      <returns>
            The string value of the specified field.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetValue(System.Int32)">
      <summary>
            Return the value of the specified field.
            </summary>
      <param name="i">The index of the field to find.</param>
      <returns>
            The <see cref="T:System.Object" /> which will contain the field value upon return.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.GetValues(System.Object[])">
      <summary>
            Populates an array of objects with the column values of the current record.
            </summary>
      <param name="values">An array of <see cref="T:System.Object" /> to copy the attribute fields into.</param>
      <returns>
            The number of instances of <see cref="T:System.Object" /> in the array.
            </returns>
    </member>
    <member name="P:openHistorian.Core.Data.Query.HistorianDataPointReader.IsClosed">
      <summary>
            Gets a value indicating whether the data point reader is closed.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.IsDBNull(System.Int32)">
      <summary>
            Return whether the specified field is set to null.
            </summary>
      <param name="i">The index of the field to find.</param>
      <returns>
        <c>true</c> if the specified field is set to null; otherwise, false.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />.</exception>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.NextResult">
      <summary>
            Moves to the next result set in the data point reader.
            </summary>
      <returns>
        <c>true</c> if there is another result set; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianDataPointReader.Read">
      <summary>
            Reads the next row of data from the data point reader.
            </summary>
      <returns>
        <c>true</c> if there is more data to read; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:openHistorian.Core.Data.Query.HistorianDataPointReader.RecordsAffected">
      <summary>
            Gets the number of records affected by the data point reader.
            </summary>
    </member>
    <member name="T:openHistorian.Core.Data.Query.HistorianQuery">
      <summary>
            Represents a historian data query module.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianQuery.#ctor(SnapDB.Snap.Services.SnapClient)">
      <summary>
            Initializes a new instance of the HistorianQuery class using an existing SnapClient instance.
            </summary>
      <param name="historian">An existing SnapClient instance for historian connectivity.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianQuery.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the HistorianQuery class using server and port information.
            </summary>
      <param name="server">The server address for the historian.</param>
      <param name="port">The port number for the historian.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Query.HistorianQuery.GetQueryResult(System.DateTime,System.DateTime,System.Int32,System.Collections.Generic.IEnumerable{openHistorian.Core.Data.Query.ISignalCalculation})">
      <summary>
            Retrieves a query result from the historian for the specified time range and signals.
            </summary>
      <param name="startTime">The start time for the query.</param>
      <param name="endTime">The end time for the query.</param>
      <param name="zoomLevel">The zoom level for the query.</param>
      <param name="signals">A collection of signal calculations to apply to the query.</param>
      <returns>A dictionary of signals and their corresponding data as SignalDataBase.</returns>
    </member>
    <member name="T:openHistorian.Core.Data.Query.IDelinearizedSignals">
      <summary>
            Represents a collection of signals that are delinearized for querying historian data.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Data.Query.IDelinearizedSignals.ColumnGroups">
      <summary>
            Gets the key-value pairs of the delinearized signals.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Data.Query.IDelinearizedSignals.ColumnHeaders">
      <summary>
            Gets the string form column headers corresponding to the delinearized signals.
            </summary>
    </member>
    <member name="T:openHistorian.Core.Data.Query.ISignalCalculation">
      <summary>
            Represents a signal calculation with additional properties and methods.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.ISignalCalculation.Calculate(System.Collections.Generic.IDictionary{System.Guid,openHistorian.Core.Data.SignalDataBase})">
      <summary>
            Calculates the signal value based on the provided signal data.
            </summary>
      <param name="signals">A dictionary of signal data indexed by their unique identifiers.</param>
    </member>
    <member name="P:openHistorian.Core.Data.Query.ISignalCalculation.SignalId">
      <summary>
            Gets the unique identifier associated with the signal calculation.
            </summary>
    </member>
    <member name="T:openHistorian.Core.Data.Query.ISignalWithName">
      <summary>
            Creates a relationship between the signal associated with a name and the signal associated with a type.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Data.Query.ISignalWithName.TagName">
      <summary>
            The name for the signal of a certain type.
            </summary>
    </member>
    <member name="T:openHistorian.Core.Data.Query.ISignalWithType">
      <summary>
            An interface that allows the results of DatabaseMethods.ExecuteQuery
            to be strong typed.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Data.Query.ISignalWithType.Functions">
      <summary>
            A set of functions that will properly convert the value type
            from its native format
            </summary>
    </member>
    <member name="P:openHistorian.Core.Data.Query.ISignalWithType.HistorianId">
      <summary>
            The Id value of the historian point.
            Null means that the point is not in the historian
            </summary>
    </member>
    <member name="T:openHistorian.Core.Data.Query.PointStream">
      <summary>
            A helper way to read data from a stream.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.PointStream.#ctor(SnapDB.Snap.IDatabaseReader{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue},SnapDB.Snap.TreeStream{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue})">
      <summary>
            Initializes a private database reader and a binary tree stream.
            </summary>
      <param name="reader">The reader for the tree stream.</param>
      <param name="stream">The binary tree stream.</param>
    </member>
    <member name="F:openHistorian.Core.Data.Query.PointStream.CurrentKey">
      <summary>
            A new <see cref="T:openHistorian.Core.Snap.HistorianKey" /> to be used as the current key.
            </summary>
    </member>
    <member name="F:openHistorian.Core.Data.Query.PointStream.CurrentValue">
      <summary>
            A new <see cref="T:openHistorian.Core.Snap.HistorianValue" /> to be used as the current value.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.PointStream.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with releasing or resetting resources.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
      <remarks>
            This method is used to clean up and release resources held by the object when it is disposed.
            </remarks>
    </member>
    <member name="F:openHistorian.Core.Data.Query.PointStream.IsValid">
      <summary>
            A boolean that returns whether or not a specified item is valid.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.PointStream.Read">
      <summary>
            A returns whether or not a key-pair value has been read.
            </summary>
      <returns>
        <c>true</c> if the pair has been read, <c>false</c> if not.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Query.PointStream.ReadNext(openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue)">
      <summary>
            Moves to the next key-value pair to read.
            </summary>
      <param name="key">The key to read.</param>
      <param name="value">The value to read.</param>
      <returns>
        <c>true</c> if the stream has been read and can advance, <c>false</c> if not read.</returns>
    </member>
    <member name="T:openHistorian.Core.Data.Query.SignalDataSingle">
      <summary>
            Contains a series of Times and Values for an individual signal.
            This class will store the value as a <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.SignalDataSingle.#ctor">
      <summary>
            The <see cref="T:openHistorian.Core.Data.Query.SignalDataSingle" /> that creates an instance of <see cref="T:openHistorian.Core.Data.Types.TypeSingle" /> as m_type.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.SignalDataSingle.AddData(System.UInt64,System.Single)">
      <summary>
            Adds a value to the signal and converts it from a <see cref="T:System.Single" />
            into its native format.
            </summary>
      <param name="time">the time value to consider.</param>
      <param name="value">the value to convert.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Query.SignalDataSingle.AddDataRaw(System.UInt64,System.UInt64)">
      <summary>
            Adds a value to the signal in its raw 64-bit format.
            </summary>
      <param name="time">the time value to consider</param>
      <param name="value">the 64-bit value</param>
    </member>
    <member name="P:openHistorian.Core.Data.Query.SignalDataSingle.Count">
      <summary>
            Gets the number of values that are in the signal.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.SignalDataSingle.GetData(System.Int32,System.UInt64@,System.Single@)">
      <summary>
            Gets a value from the signal with the provided index and automatically
            converts it to a <see cref="T:System.Single" />.
            </summary>
      <param name="index">The zero based index of the position.</param>
      <param name="time">An output field for the time.</param>
      <param name="value">An output field for the converted value.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Query.SignalDataSingle.GetDataRaw(System.Int32,System.UInt64@,System.UInt64@)">
      <summary>
            Gets a value from the signal with the provided index in its
            raw 64-bit format.
            </summary>
      <param name="index">The zero based index of the position</param>
      <param name="time">An output field for the time</param>
      <param name="value">An output field for the raw 64-bit value</param>
    </member>
    <member name="M:openHistorian.Core.Data.Query.SignalDataSingle.GetDate(System.Int32)">
      <summary>
            Gets the date stamp from the specified index.
            </summary>
      <param name="index">The index to retrieve the date from.</param>
      <returns>The date stamp from the signal stored at the specified index.</returns>
    </member>
    <member name="P:openHistorian.Core.Data.Query.SignalDataSingle.Method">
      <summary>
            Provides the type conversion method for the base class to use.
            </summary>
    </member>
    <member name="T:openHistorian.Core.Data.Query.SignalDataUnknown">
      <summary>
            This type of signal only supports reading and writing data via
            its raw type. Type conversions are not supported since its original
            type is unknown.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.SignalDataUnknown.#ctor">
      <summary>
            Data whose original type is unknown and therefore cannot be converted.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.SignalDataUnknown.AddDataRaw(System.UInt64,System.UInt64)">
      <summary>
            Adds a value to the signal in its raw 64-bit format.
            </summary>
      <param name="time">The time value to consider.</param>
      <param name="value">The 64-bit value.</param>
    </member>
    <member name="P:openHistorian.Core.Data.Query.SignalDataUnknown.Count">
      <summary>
            Gets the number of values that are in the signal
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.SignalDataUnknown.GetDataRaw(System.Int32,System.UInt64@,System.UInt64@)">
      <summary>
            Gets a value from the signal with the provided index in its
            raw 64-bit format.
            </summary>
      <param name="index">The zero based index of the position</param>
      <param name="time">An output field for the time</param>
      <param name="value">An output field for the raw 64-bit value</param>
    </member>
    <member name="M:openHistorian.Core.Data.Query.SignalDataUnknown.GetDate(System.Int32)">
      <summary>
            Gets the date from the signal with the provided index in its raw 64-bit format.
            </summary>
      <param name="index">The zero-based index of the position.</param>
      <returns>The date at that specified index.</returns>
    </member>
    <member name="P:openHistorian.Core.Data.Query.SignalDataUnknown.Method">
      <summary>
            Provides the type conversion method for the base class to use
            </summary>
    </member>
    <member name="T:openHistorian.Core.Data.Query.TableDefinition">
      <summary>
            Represents a table definition for organizing and defining the structure of data tables.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.TableDefinition.#ctor">
      <summary>
            Initializes a new instance of the TableDefinition class with default settings.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Query.TableDefinition.AddColumn(System.String,System.Type)">
      <summary>
            Adds a custom column to the table definition.
            </summary>
      <param name="name">The name of the custom column.</param>
      <param name="type">The data type of the custom column.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Query.TableDefinition.AddColumnGroupIdentifier(System.String,System.Type)">
      <summary>
            Adds a column for identifying column groups to the table definition.
            </summary>
      <param name="name">The name of the identifier column.</param>
      <param name="type">The data type of the identifier column.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Query.TableDefinition.AddGroups(System.Object,System.Nullable{System.Int32}[])">
      <summary>
            Adds signal groups to the table definition, associating points with the provided identifier.
            </summary>
      <param name="identifier">The identifier for the group.</param>
      <param name="pointId">An array of point IDs to associate with the group.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Query.TableDefinition.AddTimestampColumn(System.String)">
      <summary>
            Adds a timestamp column to the table definition.
            </summary>
      <param name="name">The name of the timestamp column.</param>
    </member>
    <member name="T:openHistorian.Core.Data.Types.TypeBase">
      <summary>
            This base class supports proper conversion of
            each primitive type into a native format.
            The native format is specified.
            If not overloading individual properties, boxing will
            occur each time that value is called.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>openHistorian.Core.Data.Types.TypeBase</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.GetValue(System.UInt64)">
      <summary>
            Retrieves the value represented by a ulong raw value and returns it as an object implementing IConvertible.
            </summary>
      <param name="value">The ulong raw value from which to obtain the value.</param>
      <returns>The IConvertible value obtained from the ulong raw value.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToBoolean(System.UInt64)">
      <summary>
            Converts a ulong value to a boolean value using the ToValue method and returns the resulting boolean value.
            </summary>
      <param name="value">The ulong value to be converted to a boolean.</param>
      <returns>The boolean value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToByte(System.UInt64)">
      <summary>
            Converts a ulong value to a byte value using the ToValue method and returns the resulting byte value.
            </summary>
      <param name="value">The ulong value to be converted to a byte.</param>
      <returns>The byte value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToDouble(System.UInt64)">
      <summary>
            Converts a ulong value to a double value using the ToValue method and returns the resulting double value.
            </summary>
      <param name="value">The ulong value to be converted to a double.</param>
      <returns>The double value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToInt16(System.UInt64)">
      <summary>
            Converts a ulong value to a short value using the ToValue method and returns the resulting short value.
            </summary>
      <param name="value">The ulong value to be converted to a short.</param>
      <returns>The short value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToInt32(System.UInt64)">
      <summary>
            Converts a ulong value to a Int32 value using the ToValue method and returns the resulting Int32 value.
            </summary>
      <param name="value">The ulong value to be converted to a Int32.</param>
      <returns>The Int32 value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToInt64(System.UInt64)">
      <summary>
            Converts a ulong value to a long value using the ToValue method and returns the resulting long value.
            </summary>
      <param name="value">The ulong value to be converted to a long.</param>
      <returns>The long value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToRaw(System.Boolean)">
      <summary>
            Converts a boolean value to a raw ulong using the ToRaw method and returns the resulting raw ulong.
            </summary>
      <param name="value">The boolean value to be converted to a raw ulong.</param>
      <returns>The raw ulong value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToRaw(System.Byte)">
      <summary>
            Converts a byte value to a raw ulong using the ToRaw method and returns the resulting raw ulong.
            </summary>
      <param name="value">The byte value to be converted to a raw ulong.</param>
      <returns>The raw ulong value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToRaw(System.Double)">
      <summary>
            Converts a double value to a raw ulong using the ToRaw method and returns the resulting raw ulong.
            </summary>
      <param name="value">The double value to be converted to a raw ulong.</param>
      <returns>The raw ulong value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToRaw(System.IConvertible)">
      <summary>
            Converts an object implementing IConvertible to its corresponding ulong raw value.
            </summary>
      <param name="value">The IConvertible value to be converted to a ulong raw value.</param>
      <returns>The ulong raw value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToRaw(System.Int16)">
      <summary>
            Converts a short value to a raw ulong using the ToRaw method and returns the resulting raw ulong.
            </summary>
      <param name="value">The short value to be converted to a raw ulong.</param>
      <returns>The raw ulong value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToRaw(System.Int32)">
      <summary>
            Converts a int value to a raw ulong using the ToRaw method and returns the resulting raw ulong.
            </summary>
      <param name="value">The int value to be converted to a raw ulong.</param>
      <returns>The raw ulong value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToRaw(System.Int64)">
      <summary>
            Converts a long value to a raw ulong using the ToRaw method and returns the resulting raw ulong.
            </summary>
      <param name="value">The long value to be converted to a raw ulong.</param>
      <returns>The raw ulong value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToRaw(System.SByte)">
      <summary>
            Converts a sbyte value to a raw ulong using the ToRaw method and returns the resulting raw ulong.
            </summary>
      <param name="value">The sbyte value to be converted to a raw ulong.</param>
      <returns>The raw ulong value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToRaw(System.Single)">
      <summary>
            Converts a float value to a raw ulong using the ToRaw method and returns the resulting raw ulong.
            </summary>
      <param name="value">The float value to be converted to a raw ulong.</param>
      <returns>The raw ulong value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToRaw(System.UInt16)">
      <summary>
            Converts a ushort value to a raw ulong using the ToRaw method and returns the resulting raw ulong.
            </summary>
      <param name="value">The ushort value to be converted to a raw ulong.</param>
      <returns>The raw ulong value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToRaw(System.UInt32)">
      <summary>
            Converts a uint value to a raw ulong using the ToRaw method and returns the resulting raw ulong.
            </summary>
      <param name="value">The uint value to be converted to a raw ulong.</param>
      <returns>The raw ulong value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToRaw(System.UInt64)">
      <summary>
            Converts a ulong value to a raw ulong using the ToRaw method and returns the resulting raw ulong.
            </summary>
      <param name="value">The ulong value to be converted to a raw ulong.</param>
      <returns>The raw ulong value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToSByte(System.UInt64)">
      <summary>
            Converts a ulong value to a sbyte value using the ToValue method and returns the resulting sbyte value.
            </summary>
      <param name="value">The ulong value to be converted to a sbyte.</param>
      <returns>The sbyte value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToSingle(System.UInt64)">
      <summary>
            Converts a ulong value to a float value using the ToValue method and returns the resulting float value.
            </summary>
      <param name="value">The ulong value to be converted to a float.</param>
      <returns>The float value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToUInt16(System.UInt64)">
      <summary>
            Converts a ulong value to a ushort value using the ToValue method and returns the resulting ushort value.
            </summary>
      <param name="value">The ulong value to be converted to a ushort.</param>
      <returns>The ushort value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToUInt32(System.UInt64)">
      <summary>
            Converts a ulong value to a UInt32 value using the ToValue method and returns the resulting UInt32 value.
            </summary>
      <param name="value">The ulong value to be converted to a UInt32.</param>
      <returns>The UInt32 value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToUInt64(System.UInt64)">
      <summary>
            Converts a ulong value to a UInt64 value using the ToValue method and returns the resulting UInt64 value.
            </summary>
      <param name="value">The ulong value to be converted to a UInt64.</param>
      <returns>The UInt64 value obtained after the conversion.</returns>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToValue(System.UInt64,System.Boolean@)">
      <summary>
            Converts a raw ulong value to a bool value using the GetValue method and assigns it to the 'value' out parameter.
            </summary>
      <param name="raw">The raw ulong value to be converted to a bool.</param>
      <param name="value">The resulting bool value after the conversion.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToValue(System.UInt64,System.Byte@)">
      <summary>
            Converts a raw ulong value to a byte value using the GetValue method and assigns it to the 'value' out parameter.
            </summary>
      <param name="raw">The raw ulong value to be converted to a byte.</param>
      <param name="value">The resulting byte value after the conversion.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToValue(System.UInt64,System.Double@)">
      <summary>
            Converts a raw ulong value to a double value using the GetValue method and assigns it to the 'value' out parameter.
            </summary>
      <param name="raw">The raw ulong value to be converted to a double.</param>
      <param name="value">The resulting double value after the conversion.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToValue(System.UInt64,System.Int16@)">
      <summary>
            Converts a raw ulong value to a short value using the GetValue method and assigns it to the 'value' out parameter.
            </summary>
      <param name="raw">The raw ulong value to be converted to a short.</param>
      <param name="value">The resulting short value after the conversion.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToValue(System.UInt64,System.Int32@)">
      <summary>
            Converts a raw ulong value to a int value using the GetValue method and assigns it to the 'value' out parameter.
            </summary>
      <param name="raw">The raw ulong value to be converted to a int.</param>
      <param name="value">The resulting int value after the conversion.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToValue(System.UInt64,System.Int64@)">
      <summary>
            Converts a raw ulong value to a long value using the GetValue method and assigns it to the 'value' out parameter.
            </summary>
      <param name="raw">The raw ulong value to be converted to a long.</param>
      <param name="value">The resulting long value after the conversion.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToValue(System.UInt64,System.SByte@)">
      <summary>
            Converts a raw ulong value to a sbyte value using the GetValue method and assigns it to the 'value' out parameter.
            </summary>
      <param name="raw">The raw ulong value to be converted to a sbyte.</param>
      <param name="value">The resulting sbyte value after the conversion.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToValue(System.UInt64,System.Single@)">
      <summary>
            Converts a raw ulong value to a float value using the GetValue method and assigns it to the 'value' out parameter.
            </summary>
      <param name="raw">The raw ulong value to be converted to a float.</param>
      <param name="value">The resulting float value after the conversion.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToValue(System.UInt64,System.UInt16@)">
      <summary>
            Converts a raw ulong value to a ushort value using the GetValue method and assigns it to the 'value' out parameter.
            </summary>
      <param name="raw">The raw ulong value to be converted to a ushort.</param>
      <param name="value">The resulting ushort value after the conversion.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToValue(System.UInt64,System.UInt32@)">
      <summary>
            Converts a raw ulong value to a uint value using the GetValue method and assigns it to the 'value' out parameter.
            </summary>
      <param name="raw">The raw ulong value to be converted to a uint.</param>
      <param name="value">The resulting uint value after the conversion.</param>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeBase.ToValue(System.UInt64,System.UInt64@)">
      <summary>
            Converts a raw ulong value to a ulong value using the GetValue method and assigns it to the 'value' out parameter.
            </summary>
      <param name="raw">The raw ulong value to be converted to a ulong.</param>
      <param name="value">The resulting ulong value after the conversion.</param>
    </member>
    <member name="T:openHistorian.Core.Data.Types.TypeDouble">
      <summary>
            Method for converting data to and from a <see cref="T:System.Double" />.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeDouble.GetValue(System.UInt64)">
      <summary>
            Retrieves the ulong value and converts to a double.
            </summary>
      <param name="value">The value to convert to double.</param>
      <returns>The value in double form.</returns>
    </member>
    <member name="F:openHistorian.Core.Data.Types.TypeDouble.Instance">
      <summary>
            Creates a new instance of TypeDouble.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeDouble.ToRaw(System.IConvertible)">
      <summary>
            Converts from a double value to a raw ulong.
            </summary>
      <param name="value">The value to convert to raw.</param>
      <returns>The value in raw ulong form.</returns>
    </member>
    <member name="T:openHistorian.Core.Data.Types.TypeSingle">
      <summary>
            Method for converting data to and from a <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeSingle.GetValue(System.UInt64)">
      <summary>
            Gets the value of the raw form data and converts it to a float.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>The float value.</returns>
    </member>
    <member name="F:openHistorian.Core.Data.Types.TypeSingle.Instance">
      <summary>
            A readonly instance of TypeSingle.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Data.Types.TypeSingle.ToRaw(System.IConvertible)">
      <summary>
            Converts a convertible value to its raw form.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>The raw value.</returns>
    </member>
    <member name="T:openHistorian.Core.Net.HistorianClient">
      <summary>
            Connects to a socket based remote historian database collection.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Net.HistorianClient.#ctor(System.String,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>openHistorian.Core.Net.HistorianClient</parameter>
          </include>
        </markup>
      </summary>
      <param name="serverNameOrIp">The server name or IP to be specified later.</param>
      <param name="port">The port number to be specified later.</param>
      <param name="integratedSecurity">Boolean that returns whether or not integratedSecurity is true.</param>
    </member>
    <member name="T:openHistorian.Core.Net.HistorianServer">
      <summary>
            Represents a historian server instance that can be used to read and write time-series data.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Net.HistorianServer.#ctor">
      <summary>
            Creates a new instance of <see cref="T:openHistorian.Core.Net.HistorianServer" />.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Net.HistorianServer.#ctor(openHistorian.Core.Net.HistorianServerDatabaseConfig,System.Nullable{System.Int32},System.String)">
      <summary>
            Adds a specified database to the historian..
            </summary>
      <param name="database">The database to add to the historian server.</param>
      <param name="port">
        <c>null</c>. The port number to be associated with the added database.</param>
      <param name="networkInterfaceIP">
        <c>null</c>. IP to be associated with the added database.</param>
    </member>
    <member name="M:openHistorian.Core.Net.HistorianServer.#ctor(System.Nullable{System.Int32},System.String)">
      <summary>
            Creates a new <see cref="T:openHistorian.Core.Net.HistorianServer" /> instance.
            </summary>
      <param name="port">The port number to be associated with the added database</param>
      <param name="networkInterfaceIP">IP to be associated with the added database.</param>
    </member>
    <member name="M:openHistorian.Core.Net.HistorianServer.AddDatabase(openHistorian.Core.Net.HistorianServerDatabaseConfig)">
      <summary>
            Adds the supplied database to this server.
            </summary>
      <param name="database">The database to add to the server.</param>
    </member>
    <member name="M:openHistorian.Core.Net.HistorianServer.Dispose">
      <summary>
            Disposes of the new snap server initialized above.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Net.HistorianServer.Host">
      <summary>
            Gets the underlying host ending for the historian.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Net.HistorianServer.RemoveDatabase(System.String)">
      <summary>
            Removes the supplied database from the historian.
            </summary>
      <param name="database">The database to remove from the server.</param>
    </member>
    <member name="T:openHistorian.Core.Net.HistorianServerDatabaseConfig">
      <summary>
            Creates a configuration for the database to utilize.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Net.HistorianServerDatabaseConfig.#ctor(System.String,System.String,System.Boolean)">
      <summary>
            Gets a database config according to a specified database name, path, and returns whether or not it supports writing..
            </summary>
      <param name="databaseName">The specified name for the database.</param>
      <param name="mainPath">The path of the database.</param>
      <param name="supportsWriting">A boolean that returns <c>true</c> if it supports writing; otherwise, <c>false</c>.</param>
    </member>
    <member name="P:openHistorian.Core.Net.HistorianServerDatabaseConfig.CacheFlushInterval">
      <summary>
            The number of milliseconds before data is taken from it's cache and put in the
            memory file.
            </summary>
      <remarks>
            Must be between 1 and 1,000.
            </remarks>
    </member>
    <member name="P:openHistorian.Core.Net.HistorianServerDatabaseConfig.DatabaseName">
      <summary>
            The name associated with the database.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Net.HistorianServerDatabaseConfig.DesiredRemainingSpace">
      <summary>
            Gets or sets the desired remaining drive space, in bytes, for final stage files.
            </summary>
      <remarks>Must be between 100MB and 1TB.</remarks>
    </member>
    <member name="P:openHistorian.Core.Net.HistorianServerDatabaseConfig.DirectoryMethod">
      <summary>
            Specify how archive files will be written into the final directory.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Net.HistorianServerDatabaseConfig.DiskFlushInterval">
      <summary>
            The number of milliseconds before data is automatically flushed to the disk.
            </summary>
      <remarks>
            Must be between 1,000 ms and 60,000 ms.
            </remarks>
    </member>
    <member name="P:openHistorian.Core.Net.HistorianServerDatabaseConfig.FinalWritePaths">
      <summary>
            The list of directories where final files can be placed written.
            If nothing is specified, the main directory is used.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Net.HistorianServerDatabaseConfig.ImportAttachedPathsAtStartup">
      <summary>
            Determines whether the historian should import attached paths at startup.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Net.HistorianServerDatabaseConfig.ImportPaths">
      <summary>
            Gets all of the paths that are known by this historian.
            A path can be a file name or a folder.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Net.HistorianServerDatabaseConfig.StagingCount">
      <summary>
            The number of stages to progress through before writing the final file.
            </summary>
      <remarks>
            This defaults to 3 stages which allows files up to 10 hours of data to be combined
            into a single archive file. If <see cref="P:openHistorian.Core.Net.HistorianServerDatabaseConfig.TargetFileSize" /> is large and files of this
            size are not being created, increase this to 4.
            Valid settings are 3 or 4.
            </remarks>
    </member>
    <member name="P:openHistorian.Core.Net.HistorianServerDatabaseConfig.TargetFileSize">
      <summary>
            Gets or sets the desired size of the final stage archive files.
            </summary>
      <remarks>Must be between 100MB and 1TB.</remarks>
    </member>
    <member name="M:openHistorian.Core.Net.HistorianServerDatabaseConfig.ToServerDatabaseSettings">
      <summary>
            Creates a <see cref="T:SnapDB.Snap.Services.ServerDatabaseSettings" /> configuration that can be used for <see cref="T:SnapDB.Snap.Services.SnapServerDatabase`2" /></summary>
      <returns>The <see cref="T:SnapDB.Snap.Services.ServerDatabaseSettings" /> configuration.</returns>
    </member>
    <member name="T:openHistorian.Core.Queues.HistorianInputQueue">
      <summary>
            Serves as a local queue for getting data into a remote historian.
            This queue will isolate the input from the volatility of a
            remote historian. Data is also kept in this buffer until it has been committed
            to the disk subsystem.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Queues.HistorianInputQueue.#ctor(System.Func{SnapDB.Snap.Services.ClientDatabaseBase{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue}})">
      <summary>
            Initializes a new instance of the HistorianInputQueue with the specified function to get a database.
            </summary>
      <param name="getDatabase">A function that returns a ClientDatabaseBase of HistorianKey and HistorianValue.</param>
    </member>
    <member name="M:openHistorian.Core.Queues.HistorianInputQueue.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>openHistorian.Core.Queues.HistorianInputQueue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:openHistorian.Core.Queues.HistorianInputQueue.Enqueue(openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue)">
      <summary>
            Adds point data to the queue.
            </summary>
      <param name="key">The key associated with the point being added.</param>
      <param name="value">The value associated with the point being added.</param>
    </member>
    <member name="M:openHistorian.Core.Queues.HistorianInputQueue.Enqueue(SnapDB.Snap.TreeStream{openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue})">
      <summary>
            Provides a thread safe way to enqueue points.
            While points are streaming all other writes are blocked. Therefore,
            this point stream should be high speed.
            </summary>
      <param name="stream">The high speed point stream.</param>
    </member>
    <member name="P:openHistorian.Core.Queues.HistorianInputQueue.Size">
      <summary>
            Gets queue size.
            </summary>
    </member>
    <member name="T:openHistorian.Core.Snap.HistorianKey">
      <summary>
            The standard key used for the historian.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKey.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>openHistorian.Core.Snap.HistorianKey</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKey.Clear">
      <summary>
            Sets the key to the default values.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKey.Clone">
      <summary>
            Creates a clone of the HistorianKey.
            </summary>
      <returns>The clone of the HistorianKey.</returns>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKey.CompareTo(openHistorian.Core.Snap.HistorianKey)">
      <summary>
            Compares the current instance to <paramref name="other" />.
            </summary>
      <param name="other">The key to compare to</param>
      <returns>A value that indicates the relationship between the timestamps.</returns>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKey.CompareTo(System.Byte*)">
      <summary>
            Compares the current instance to <paramref name="stream" /></summary>
      <param name="stream">The stream to compare to.</param>
      <returns>A value that indicates the relationship between the timestamp and the stream.</returns>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKey.CopyTo(openHistorian.Core.Snap.HistorianKey)">
      <summary>
            Copies the time, point ID, and entry number to the destination.
            </summary>
      <param name="destination">The destination to copy to.</param>
    </member>
    <member name="F:openHistorian.Core.Snap.HistorianKey.EntryNumber">
      <summary>
            The number of the entry. This allows for duplicate values to be stored using the same Timestamp and PointID.
            </summary>
      <remarks>
            When writing data, this property is managed by the historian engine. Do not change this value in your code.
            </remarks>
    </member>
    <member name="P:openHistorian.Core.Snap.HistorianKey.GenericTypeGuid">
      <summary>
            The generic GUID used for the encoding.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKey.IsEqualTo(openHistorian.Core.Snap.HistorianKey)">
      <summary>
            Compares the timestamp to the <paramref name="right" /> to check if they are equal.
            </summary>
      <param name="right">The HistorianKey Timestamp to compare to.</param>
      <returns>
        <c>true</c> if the timestamp is equal to the timestamp on the right; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKey.IsGreaterThan(openHistorian.Core.Snap.HistorianKey)">
      <summary>
            Compares the timestamp to the <paramref name="right" /> to check if it is greater than <paramref name="right" />.
            </summary>
      <param name="right">The HistorianKey Timestamp to compare to.</param>
      <returns>
        <c>true</c> if the timestamp is greater than <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKey.IsGreaterThanOrEqualTo(openHistorian.Core.Snap.HistorianKey)">
      <summary>
            Compares the timestamp to the <paramref name="right" /> to check if it is greater than or equal to<paramref name="right" /></summary>
      <param name="right">The HistorianKey Timestamp to compare to.</param>
      <returns>
        <c>true</c> if the timestamp is greater than or equal to <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKey.IsLessThan(openHistorian.Core.Snap.HistorianKey)">
      <summary>
            Compares the timestamp to <paramref name="right" /> to check if it is less than <paramref name="right" />.
            </summary>
      <param name="right">The HistorianKey Timestamp to compare to.</param>
      <returns>
        <c>true</c> if the timestamp is less than the timestamp on the right; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:openHistorian.Core.Snap.HistorianKey.MillisecondTimestamp">
      <summary>
            Gets or sets timestamp restricted to millisecond resolution.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKey.Read(SnapDB.IO.BinaryStreamBase)">
      <summary>
            Creates a read-only <see cref="T:SnapDB.IO.BinaryStreamBase" /> that reflects the time, point ID, and entry number of the specified stream.
            </summary>
      <param name="stream">The stream to read.</param>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKey.Read(System.Byte*)">
      <summary>
            Reads the byte stream data and sets the timestamp, point ID, and entry number.
            </summary>
      <param name="stream">The stream to read.</param>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKey.SetMax">
      <summary>
            Sets all of the values in this class to their maximum value.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKey.SetMin">
      <summary>
            Sets all of the values in this class to their minimum value.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.HistorianKey.Size">
      <summary>
            Sets the available size.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.HistorianKey.TimestampAsDate">
      <summary>
            Conveniently type cast the Timestamp as <see cref="T:System.DateTime" />.
            </summary>
      <remarks>
            Assignments expected to be in UTC.
            </remarks>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKey.ToString">
      <summary>
            Casts the DateTime as a string.
            </summary>
      <returns>The <see cref="T:System.DateTime" /> as a string.</returns>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKey.Write(SnapDB.IO.BinaryStreamBase)">
      <summary>
            Writes the indicated time, point ID, and entry number to the specified stream.
            </summary>
      <param name="stream">The stream to write to.</param>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKey.Write(System.Byte*)">
      <summary>
            Writes the timestamp, point ID, and entry number to the stream.
            </summary>
      <param name="stream">The stream to write to.</param>
    </member>
    <member name="T:openHistorian.Core.Snap.HistorianKeyValueMethods">
      <summary>
            Uses the standard key and value for the historian and contains a function that copies them from a source to a destination.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKeyValueMethods.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>openHistorian.Core.Snap.HistorianKeyValueMethods</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianKeyValueMethods.Copy(openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue,openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue)">
      <summary>
            Copies HistorianKey and HistorianValue from a specified source to a specified destination.
            </summary>
      <param name="srcKey">The source of the key.</param>
      <param name="srcValue">The source of the value.</param>
      <param name="destKey">The destination for the key.</param>
      <param name="dstValue">The destination for the value.</param>
    </member>
    <member name="T:openHistorian.Core.Snap.HistorianValue">
      <summary>
            The standard value used in the OpenHistorian.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianValue.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>openHistorian.Core.Snap.HistorianValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.HistorianValue.AsSingle">
      <summary>
            Type casts the <see cref="F:openHistorian.Core.Snap.HistorianValue.Value1" /> as a single.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.HistorianValue.AsString">
      <summary>
            Type casts <see cref="F:openHistorian.Core.Snap.HistorianValue.Value1" /> and <see cref="F:openHistorian.Core.Snap.HistorianValue.Value2" /> into a 16 character string.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianValue.Clear">
      <summary>
            Sets the value to the default values.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianValue.Clone">
      <summary>
            Clones this instance of the class.
            </summary>
      <returns>A clone of the <see cref="T:openHistorian.Core.Snap.HistorianValue" /> class.</returns>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianValue.CompareTo(openHistorian.Core.Snap.HistorianValue)">
      <summary>
            Compares values.
            </summary>
      <param name="other">The HistorianValue to compare to.</param>
      <returns>A number that indicates the relationship between the two values being compared.</returns>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianValue.CopyTo(openHistorian.Core.Snap.HistorianValue)">
      <summary>
            Copies the values to a specified destination.
            </summary>
      <param name="destination">The destination to send the copies to.</param>
    </member>
    <member name="P:openHistorian.Core.Snap.HistorianValue.GenericTypeGuid">
      <summary>
            The generic GUID type to use for encoding.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianValue.Read(SnapDB.IO.BinaryStreamBase)">
      <summary>
            Reads the values from the stream.
            </summary>
      <param name="stream">The stream to read from.</param>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianValue.Read(System.Byte*)">
      <summary>
            Reads the byte stream and assigns values to Value1, Value2, and Value3.
            </summary>
      <param name="stream">The stream to read from.</param>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianValue.SetMax">
      <summary>
            Sets the maximum for Value1, Value2, and Value3.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianValue.SetMin">
      <summary>
            Sets the minimum for Value1, Value2, and Value3.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.HistorianValue.Size">
      <summary>
            The size of the encoded data.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianValue.ToStruct">
      <summary>
            Creates a struct from this data.
            </summary>
      <returns>The new struct based on Value1, Value2, and Value3.</returns>
    </member>
    <member name="F:openHistorian.Core.Snap.HistorianValue.Value1">
      <summary>
            Value1 should be where the first 64 bits of the field is stored. For 32 bit values, use this field only.
            </summary>
    </member>
    <member name="F:openHistorian.Core.Snap.HistorianValue.Value2">
      <summary>
            Should only be used if value cannot be entirely stored in Value1. Compression penalty occurs when using this field.
            </summary>
    </member>
    <member name="F:openHistorian.Core.Snap.HistorianValue.Value3">
      <summary>
            Should contain any kind of digital data such as Quality. Compression penalty occurs when used for any other type of field.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianValue.Write(SnapDB.IO.BinaryStreamBase)">
      <summary>
            Writes the values.
            </summary>
      <param name="stream">The stream to write to.</param>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianValue.Write(System.Byte*)">
      <summary>
            Writes the data for Value1, Value2, and Value3 to the stream.
            </summary>
      <param name="stream">The stream to write to.</param>
    </member>
    <member name="T:openHistorian.Core.Snap.HistorianValueStruct">
      <summary>
            A struct that represents the standard historian value.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.HistorianValueStruct.AsSingle">
      <summary>
            Type casts the <see cref="F:openHistorian.Core.Snap.HistorianValueStruct.Value1" /> as a single.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.HistorianValueStruct.AsString">
      <summary>
            Type casts <see cref="F:openHistorian.Core.Snap.HistorianValueStruct.Value1" /> and <see cref="F:openHistorian.Core.Snap.HistorianValueStruct.Value2" /> into a 16 character string.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.HistorianValueStruct.ToClass">
      <summary>
            Creates a class instance from this value.
            </summary>
      <returns>The class instance based on the value.</returns>
    </member>
    <member name="F:openHistorian.Core.Snap.HistorianValueStruct.Value1">
      <summary>
            Value 1 should be where the first 64 bits of the field is stored. For 32 bit values, use this field only.
            </summary>
    </member>
    <member name="F:openHistorian.Core.Snap.HistorianValueStruct.Value2">
      <summary>
            Should only be used if value cannot be entirely stored in Value1. Compression penalty occurs when using this field.
            </summary>
    </member>
    <member name="F:openHistorian.Core.Snap.HistorianValueStruct.Value3">
      <summary>
            Should contain any kind of digital data such as Quality. Compression penalty occurs when used for any other type of field.
            </summary>
    </member>
    <member name="T:openHistorian.Core.Snap.SortedPointBuffer">
      <summary>
            Represents a sorted point buffer that can properly handle or remove duplicates.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.SortedPointBuffer.#ctor(System.Int32,System.Boolean)">
      <summary>
            Creates a new <see cref="T:openHistorian.Core.Snap.SortedPointBuffer" />.
            </summary>
      <param name="capacity">The maximum number of items that can be stored in the buffer.</param>
      <param name="removeDuplicates">Flag that specifies if buffer should remove duplicate key values upon reading.</param>
    </member>
    <member name="T:openHistorian.Core.Snap.Definitions.HistorianFileEncodingDefinition">
      <summary>
            Defines the encoding method for storing and retrieving pairs of HistorianKey and HistorianValue.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.Definitions.HistorianFileEncodingDefinition.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>openHistorian.Core.Snap.Definitions.HistorianFileEncodingDefinition</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.Definitions.HistorianFileEncodingDefinition.Create``2">
      <summary>
            Creates a new instance of the encoding method for the specified key and value types.
            </summary>
      <typeparam name="TKey">The type of the keys.</typeparam>
      <typeparam name="TValue">The type of the values.</typeparam>
      <returns>An instance of the encoding method.</returns>
    </member>
    <member name="P:openHistorian.Core.Snap.Definitions.HistorianFileEncodingDefinition.KeyTypeIfNotGeneric">
      <summary>
            Gets the type of keys used in the encoding method when not used in a generic context.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.Definitions.HistorianFileEncodingDefinition.Method">
      <summary>
            Gets the unique encoding method defined by the TypeGuid.
            </summary>
    </member>
    <member name="F:openHistorian.Core.Snap.Definitions.HistorianFileEncodingDefinition.TypeGuid">
      <summary>
            A unique identifier for this compression method.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.Definitions.HistorianFileEncodingDefinition.ValueTypeIfNotGeneric">
      <summary>
            gets the type of values used in the encoding method when not used in a generic context.
            </summary>
    </member>
    <member name="T:openHistorian.Core.Snap.Definitions.HistorianStreamEncodingDefinition">
      <summary>
            Defines an encoding definition for historian stream data.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.Definitions.HistorianStreamEncodingDefinition.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>openHistorian.Core.Snap.Definitions.HistorianStreamEncodingDefinition</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.Definitions.HistorianStreamEncodingDefinition.Create``2">
      <summary>
            Creates an instance of the historian stream encoding for the specified key and value types.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <returns>An encoding instance for historian stream data.</returns>
    </member>
    <member name="P:openHistorian.Core.Snap.Definitions.HistorianStreamEncodingDefinition.KeyTypeIfNotGeneric">
      <summary>
            Gets the type of the key if not specified as a generic parameter.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.Definitions.HistorianStreamEncodingDefinition.Method">
      <summary>
            Gets the encoding method.
            </summary>
    </member>
    <member name="F:openHistorian.Core.Snap.Definitions.HistorianStreamEncodingDefinition.TypeGuid">
      <summary>
            Sets the encoding definition.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.Definitions.HistorianStreamEncodingDefinition.ValueTypeIfNotGeneric">
      <summary>
            Gets the type of the value if not specified as a generic parameter.
            </summary>
    </member>
    <member name="T:openHistorian.Core.Snap.Encoding.HistorianFileEncoding">
      <summary>
            Provides an encoding method for storing and retrieving pairs of HistorianKey and HistorianValue.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.Encoding.HistorianFileEncoding.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>openHistorian.Core.Snap.Encoding.HistorianFileEncoding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.Encoding.HistorianFileEncoding.Clone">
      <summary>
            Clones a HistorianKey-HistorianValue pair.
            </summary>
      <returns>The clone of the pair.</returns>
    </member>
    <member name="P:openHistorian.Core.Snap.Encoding.HistorianFileEncoding.ContainsEndOfStreamSymbol">
      <summary>
            Does not contain an end of stream symbol.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.Encoding.HistorianFileEncoding.Decode(SnapDB.IO.BinaryStreamBase,openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue,openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue,System.Boolean@)">
      <summary>
            Decodes the data from the <see cref="T:SnapDB.IO.BinaryStreamBase" />.
            </summary>
      <param name="stream">The <see cref="T:SnapDB.IO.BinaryStreamBase" /> for decoded the encoded data.</param>
      <param name="prevKey">The previous HistorianKey to compare.</param>
      <param name="prevValue">The previous HistorianValue to compare.</param>
      <param name="key">The current key to decode.</param>
      <param name="value">The current value to decode.</param>
      <param name="isEndOfStream">If end of stream has been reached, returns <c>true</c>; else, <c>false</c>.</param>
    </member>
    <member name="M:openHistorian.Core.Snap.Encoding.HistorianFileEncoding.Decode(System.Byte*,openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue,openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue,System.Boolean@)">
      <summary>
            The Decode process.
            </summary>
      <param name="stream">The stream to decode.</param>
      <param name="prevKey">The key prior to the current key to compare.</param>
      <param name="prevValue">The value prior to the current value to compare.</param>
      <param name="key">The current key to decode.</param>
      <param name="value">The current value to decode.</param>
      <param name="isEndOfStream">The end of the stream returns <c>true</c>; otherwise, <c>false.</c></param>
      <returns>The decoded data.</returns>
    </member>
    <member name="M:openHistorian.Core.Snap.Encoding.HistorianFileEncoding.Encode(SnapDB.IO.BinaryStreamBase,openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue,openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue)">
      <summary>
            Encodes historical data and writes it to a <see cref="T:SnapDB.IO.BinaryStreamBase" />.
            </summary>
      <param name="stream">The BinaryStreamBase for writing the encoded data.</param>
      <param name="prevKey">The previous HistorianKey for comparison.</param>
      <param name="prevValue">The previous HistorianValue for comparison.</param>
      <param name="key">The current HistorianKey to encode.</param>
      <param name="value">The current HistorianValue to encode.</param>
    </member>
    <member name="M:openHistorian.Core.Snap.Encoding.HistorianFileEncoding.Encode(System.Byte*,openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue,openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue)">
      <summary>
            Encodes historical data.
            </summary>
      <param name="stream">The stream for writing the encoded data.</param>
      <param name="prevKey">The key prior to the current key to compare.</param>
      <param name="prevValue">The value prior to the current value to compare.</param>
      <param name="key">The current key to encode.</param>
      <param name="value">The current value to encode.</param>
      <returns>The size in bytes of the final encode.</returns>
    </member>
    <member name="P:openHistorian.Core.Snap.Encoding.HistorianFileEncoding.EncodingMethod">
      <summary>
            A type of <see cref="T:SnapDB.Snap.EncodingDefinition" /> unique identifier.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.Encoding.HistorianFileEncoding.EndOfStreamSymbol">
      <summary>
            If end of stream symbol is reached, throws a <see cref="T:System.NotSupportedException" />.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.Encoding.HistorianFileEncoding.MaxCompressionSize">
      <summary>
            Sets the maximum size for compression.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.Encoding.HistorianFileEncoding.UsesPreviousKey">
      <summary>
            The method uses the previous key.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.Encoding.HistorianFileEncoding.UsesPreviousValue">
      <summary>
            The method does NOT uses the previous value.
            </summary>
    </member>
    <member name="T:openHistorian.Core.Snap.Encoding.HistorianStreamEncoding">
      <summary>
            A class for encoding and decoding pairs of HistorianKey and HistorianValue.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.Encoding.HistorianStreamEncoding.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>openHistorian.Core.Snap.Encoding.HistorianStreamEncoding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.Encoding.HistorianStreamEncoding.Clone">
      <summary>
            Creates a clone of the HistorianKey and HistorianValue pair.
            </summary>
      <returns>The created clone.</returns>
    </member>
    <member name="P:openHistorian.Core.Snap.Encoding.HistorianStreamEncoding.ContainsEndOfStreamSymbol">
      <summary>
            Does contain an end of stream symbol.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Snap.Encoding.HistorianStreamEncoding.Decode(SnapDB.IO.BinaryStreamBase,openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue,openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue,System.Boolean@)">
      <summary>
            The Decode process.
            </summary>
      <param name="stream">The stream to decode.</param>
      <param name="prevKey">The key prior to the current key to compare.</param>
      <param name="prevValue">The value prior to the current value to compare.</param>
      <param name="key">The current key to decode.</param>
      <param name="value">The current value to decode.</param>
      <param name="isEndOfStream">The end of the stream returns <c>true</c>; otherwise, <c>false.</c></param>
      <returns>The decoded data.</returns>
    </member>
    <member name="M:openHistorian.Core.Snap.Encoding.HistorianStreamEncoding.Encode(SnapDB.IO.BinaryStreamBase,openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue,openHistorian.Core.Snap.HistorianKey,openHistorian.Core.Snap.HistorianValue)">
      <summary>
            Encodes historical data.
            </summary>
      <param name="stream">The stream for writing the encoded data.</param>
      <param name="prevKey">The key prior to the current key to compare.</param>
      <param name="prevValue">The value prior to the current value to compare.</param>
      <param name="currentKey">The current key to encode.</param>
      <param name="currentValue">The current value to encode.</param>
      <returns>The size in bytes of the final encode.</returns>
    </member>
    <member name="P:openHistorian.Core.Snap.Encoding.HistorianStreamEncoding.EncodingMethod">
      <summary>
            Gets the unique identifier for this encoding method.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.Encoding.HistorianStreamEncoding.EndOfStreamSymbol">
      <summary>
            States the end of stream symbol used in encoding.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.Encoding.HistorianStreamEncoding.MaxCompressionSize">
      <summary>
            Sets the maximum compression size.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.Encoding.HistorianStreamEncoding.UsesPreviousKey">
      <summary>
            The method uses the previous key during encoding.
            </summary>
    </member>
    <member name="P:openHistorian.Core.Snap.Encoding.HistorianStreamEncoding.UsesPreviousValue">
      <summary>
            The method does not use the previous value during encoding.
            </summary>
    </member>
    <member name="T:openHistorian.Core.Utility.ConvertArchiveFile">
      <summary>
            openHistorian 1.0 Archive Conversion Functions.
            </summary>
    </member>
    <member name="M:openHistorian.Core.Utility.ConvertArchiveFile.ConvertVersion1FileHandleDuplicates(System.String,System.String,SnapDB.Snap.EncodingDefinition,System.Int64@,System.Int64@,System.Int64@)">
      <summary>
            Converts a Version 1 historian file, handles duplicates, and writes the data to a new file.
            </summary>
      <param name="oldFileName">The path to the old historian file.</param>
      <param name="newFileName">The path to the new historian file.</param>
      <param name="compressionMethod">The encoding definition for compression.</param>
      <param name="readTime">The time taken for reading data from the old file (output).</param>
      <param name="sortTime">The time taken for sorting the data (output).</param>
      <param name="writeTime">The time taken for writing data to the new file (output).</param>
      <returns>The total count of data points converted.</returns>
      <exception cref="T:System.ArgumentException">Thrown when the old file does not exist, or when the new file already exists.</exception>
    </member>
    <member name="M:openHistorian.Core.Utility.ConvertArchiveFile.ConvertVersion1FileIgnoreDuplicates(System.String,System.String,SnapDB.Snap.EncodingDefinition)">
      <summary>
            Converts a version 1 historian file to a new format, ignoring duplicate entries.
            </summary>
      <param name="oldFileName">The path to the old version 1 historian file to be converted.</param>
      <param name="newFileName">The path for the new historian file to be created.</param>
      <param name="compressionMethod">The encoding definition for data compression.</param>
      <returns>The number of data points in the converted historian file.</returns>
      <exception cref="T:System.ArgumentException">Thrown when the old file does not exist or the new file already exists.</exception>
    </member>
  </members>
</doc>