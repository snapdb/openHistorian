"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[294],{47294:(e,t,n)=>{n.r(t),n.d(t,{default:()=>c});var a=n(6904),l=n(2580),r=n(38942),s=n(94194),o=n(54840);const i=e=>{var t,n;const[i,m]=a.useState(!1),[c,u]=a.useState(!1),[d,p]=a.useState([]),[S,h]=a.useState("uninitiated");a.useEffect((()=>{h("loading");const t=((e,t)=>{const n=`${t}api/Grafana`,a=new o.GrafanaQueryFunctions(n),l=[];e.forEach((e=>l.push(`PointTag = '${e.trim()}'`)));const r=l.join(" OR "),s={dataTypeIndex:o.Grafana.DataTypeIndex.Measurement,expression:`SELECT PointTag, ID FROM ActiveMeasurements WHERE ${r}`};return a.Search(s)})(e.SelectedPointTags,e.HomePath);return t.done((e=>{const t=[{Label:"Timestamp",Value:"Timestamp"}];e.forEach((e=>{const[n,a]=e.split(",");t.push({Label:`${n} (${a})`,Value:a})})),p(t),h("idle")})).fail((()=>h("error"))),()=>{null!=(null==t?void 0:t.abort)&&t.abort()}}),[e.SelectedPointTags,e.HomePath]);const v=a.useCallback((()=>{var t;if(0===d.length)return;const n=e.Columns.map((e=>e.ID)),a=null===(t=d.find((e=>!n.includes(e.Value))))||void 0===t?void 0:t.Value;if(null!=a){const t=[...e.Columns,{Column:e.Columns.length,ID:a}];e.SetColumns(t),u(!1)}else u(!0)}),[e.Columns,e.SetColumns,d]),b=a.useCallback(((t,n)=>{if(e.Columns.filter(((e,t)=>t!==n)).map((e=>e.ID)).includes(t.ID))return void m(!0);m(!1);const a=[...e.Columns];a[n]=t,e.SetColumns(a)}),[e.Columns,e.SetColumns]),g=a.useCallback((t=>{const n=[...e.Columns];n.splice(t,1),n.forEach(((e,t)=>e.Column=t)),e.SetColumns(n)}),[e.Columns,e.SetColumns]);return a.createElement(a.Fragment,null,a.createElement("fieldset",{className:"border",style:{padding:"10px"}},a.createElement("legend",{className:"w-auto pr-2",style:{fontSize:"large"}},a.createElement("div",{className:"row align-items-center"},a.createElement("div",{className:"col-auto"},"Column Selector"),0===(null===(t=e.Columns)||void 0===t?void 0:t.length)&&0!==d.length?a.createElement("div",{className:"col-auto"},a.createElement("button",{className:"btn",onClick:()=>v()},a.createElement(s.ReactIcons.CirclePlus,null))):null)),a.createElement("div",{className:"row m-0"},a.createElement("div",{className:"col-12"},null===(n=e.Columns)||void 0===n?void 0:n.map(((t,n)=>a.createElement(a.Fragment,{key:n},a.createElement("div",{className:"row align-items-center"},a.createElement("div",{className:"col-auto"},a.createElement(l.Input,{Record:t,Field:"Column",Label:"Column",Type:"number",AllowNull:!1,Setter:e=>b(e,n),Valid:e=>t[e]>=0,Feedback:"Column must be greater than or equal to 0 and non-empty."})),a.createElement("div",{className:"col"},a.createElement(l.Select,{Record:t,Field:"ID",Label:"Measurement",Setter:e=>b(e,n),Options:d})),a.createElement("div",{className:"col-auto"},a.createElement("button",{className:"btn",onClick:()=>g(n)},a.createElement(s.ReactIcons.TrashCan,{Color:"red"}))),n===e.Columns.length-1?a.createElement("div",{className:"col-auto"},a.createElement("button",{className:"btn",onClick:()=>v()},a.createElement(s.ReactIcons.CirclePlus,null))):null)))))),c?a.createElement(r.Alert,{Class:"alert-info"},"Unable to add column: All available measurements have already been selected."):null,i?a.createElement(r.Alert,{Class:"alert-info"},"The selected output measurement is already in use by another column. Please select another one."):null))},m={FramesPerSecond:{Value:30,Description:""},FileName:{Value:"measurements.csv",Description:"Define the name of the CSV file from which measurements will be read."},InputInterval:{Value:33.333333,Description:"Define the interval of time, in milliseconds, between sending frames into the concentrator."},SkipRows:{Value:0,Description:"Define the number of lines to skip in the source file before the header line is encountered."},TransverseMode:{Value:!1,Description:"Indicate whether CSV file is in transverse mode for real-time concentration."},MeasurementsPerInterval:{Value:5,Description:"Define the number of measurements that are read from the CSV file in each frame."},SimulateTimestamp:{Value:!1,Description:"Indicate whether timestamps are simulated for real-time concentration."},AutoRepeat:{Value:!1,Description:"Define if the CSV input file data should be replayed repeatedly."},UseHighResolutionInputTimer:{Value:!1,Description:"Determines if a high-resolution precision timer should be used for CSV file based input."},ColumnMappings:{Value:[],Description:'Defines the column mappings must defined: e.g., "0=Timestamp; 1=PPA:12; 2=PPA13".',Parse:e=>null==e?[]:e.split(";").map((e=>e.trim())).filter((e=>""!==e)).map((e=>{const[t,n]=e.split("=").map((e=>e.trim()));return{Column:parseInt(t),ID:n}})),Construct:e=>null==e||0===e.length?"":e.map((e=>`${e.Column}=${e.ID}`)).join("; ")},OutputMeasurements:{Description:"Defines primary keys of output measurements the adapter expects; can be one of a filter expression, measurement key, point tag or Guid.",Value:[],Parse:e=>null==e?[]:""===e?[""]:e.split(";"),Construct:e=>0===(null==e?void 0:e.length)?null:null==e?void 0:e.join(";")}},c={Settings:e=>{const t=a.useMemo((()=>o.AdapterHelperFuncs.parseConnectionString(e.ConnectionString,m)),[e.ConnectionString]);o.AdapterHelperFuncs.useSetInitialConnectionString(e.ConnectionString,e.SetConnectionString,m,t),o.AdapterHelperFuncs.useSetDefaultSettings(m,e.SetDefaultSettings);const n=a.useCallback((t=>{const n=o.AdapterHelperFuncs.constructConnectionString(t,m);n!==e.ConnectionString&&e.SetConnectionString(n)}),[e.ConnectionString]);a.useEffect((()=>{const n=[];null!=t&&((null==t.FramesPerSecond||t.FramesPerSecond<=0||t.FramesPerSecond>120)&&n.push("Adapter Frames Per Second must be greater than 0, less than 120 and non-empty."),(null==t.FileName||t.FileName.length<3)&&n.push("Adapter File Name must be greater than 3 characters and non-empty."),null==t.InputInterval&&n.push("Adapter Input Interval must be non-empty."),(null==t.SkipRows||t.SkipRows<0)&&n.push("Adapter Skip Rows must be greater than or equal to 0 and non-empty."),(null==t.MeasurementsPerInterval||t.MeasurementsPerInterval<=0)&&n.push("Adapter Measurements Per Interval must be greater than 0 and non-empty."),e.SetErrors(n))}),[null==t?void 0:t.FramesPerSecond,null==t?void 0:t.FileName,null==t?void 0:t.InputInterval,null==t?void 0:t.SkipRows,null==t?void 0:t.MeasurementsPerInterval,e.SetErrors]);const r=a.useCallback((e=>{n(Object.assign(Object.assign({},t),{ColumnMappings:e}))}),[t,n]),s=a.useCallback((e=>{n(Object.assign(Object.assign({},t),{OutputMeasurements:e}))}),[t,n]);return a.createElement(a.Fragment,null,null!=t?a.createElement("div",{className:"container-fluid d-flex flex-column h-100 p-0"},a.createElement("div",{className:"row"},a.createElement("div",{className:"col-6"},a.createElement(l.Input,{Record:t,Type:"text",Field:"FileName",Label:"File Name",AllowNull:!1,Valid:e=>{var n;return null!=t[e]&&(null===(n=t[e])||void 0===n?void 0:n.length)>=3},Setter:n,Feedback:"Adapter File Name must be greater than 3 characters and non-empty.",Help:m.FileName.Description})),a.createElement("div",{className:"col-6"},a.createElement(l.Input,{Record:t,Type:"number",AllowNull:!1,Field:"SkipRows",Label:"Skip Rows",Valid:e=>t[e]>=0,Setter:n,Feedback:"Adapter Skip Rows must be greater than or equal to 0 and non-empty.",Help:m.SkipRows.Description}))),a.createElement("div",{className:"row"},a.createElement("div",{className:"col-6"},a.createElement(l.Input,{Record:t,AllowNull:!1,Type:"number",Field:"InputInterval",Label:"Input Interval (ms)",Valid:e=>null!=t[e],Setter:n,Feedback:"Adapter Input Interval must be non-empty.",Help:m.InputInterval.Description})),a.createElement("div",{className:"col-6"},a.createElement(l.Input,{Type:"number",AllowNull:!1,Record:t,Field:"FramesPerSecond",Label:"Frames Per Second",Valid:e=>t[e]>0&&t[e]<120,Setter:n,Feedback:"Adapter Frames Per Second must be greater than 0, less than 120 and non-empty.",Help:m.FramesPerSecond.Description}))),a.createElement("div",{className:"row align-items-center"},a.createElement("div",{className:"col-auto"},a.createElement(l.ToggleSwitch,{Record:t,Field:"TransverseMode",Label:"Transverse Mode",Setter:n,Help:m.TransverseMode.Description})),a.createElement("div",{className:"col"},a.createElement(l.Input,{Record:t,AllowNull:!1,Type:"number",Disabled:!t.TransverseMode,Field:"MeasurementsPerInterval",Label:"Measurements Per Interval",Valid:e=>t[e]>0,Setter:n,Feedback:"Adapter Measurements Per Interval must be greater than 0 and non-empty.",Help:m.MeasurementsPerInterval.Description}))),a.createElement("div",{className:"row"},a.createElement("div",{className:"col-4"},a.createElement(l.ToggleSwitch,{Record:t,Field:"SimulateTimestamp",Label:"Simulate Timestamp",Setter:n,Help:m.SimulateTimestamp.Description})),a.createElement("div",{className:"col-4"},a.createElement(l.ToggleSwitch,{Record:t,Field:"AutoRepeat",Label:"Auto Repeat",Setter:n,Help:m.AutoRepeat.Description})),a.createElement("div",{className:"col-4"},a.createElement(l.ToggleSwitch,{Record:t,Field:"UseHighResolutionInputTimer",Label:"Use High Res Timer",Setter:n,Help:m.UseHighResolutionInputTimer.Description}))),t.TransverseMode?a.createElement(a.Fragment,null,a.createElement("div",{className:"row mb-2"},a.createElement("div",{className:"col-12"},a.createElement(o.MeasurementSelector,{Measurements:t.OutputMeasurements,SetMeasurements:s,HomePath:e.HomePath,Title:"Output Measurement Selector",DataTypeIndex:o.Grafana.DataTypeIndex.Measurement}))),a.createElement("div",{className:"row"},a.createElement("div",{className:"col-12"},a.createElement(i,{SelectedPointTags:t.OutputMeasurements,Columns:t.ColumnMappings,SetColumns:r,HomePath:e.HomePath})))):null):null)},Output:null}}}]);